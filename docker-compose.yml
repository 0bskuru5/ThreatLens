version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: threatlens-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: threatlens
      POSTGRES_USER: threatlens
      POSTGRES_PASSWORD: threatlens_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/scripts/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U threatlens -d threatlens"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ThreatLens Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: threatlens-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: threatlens
      DB_USER: threatlens
      DB_PASSWORD: threatlens_password
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      FRONTEND_URL: http://localhost:3000
      EMAIL_ENABLED: false
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./server/logs:/app/server/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ThreatLens Frontend
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile.frontend
    container_name: threatlens-frontend
    restart: unless-stopped
    environment:
      VITE_API_URL: http://localhost:3001
    ports:
      - "3000:80"
    depends_on:
      - backend

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: threatlens-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: threatlens-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    profiles:
      - nginx

volumes:
  postgres_data:
  redis_data:

networks:
  default:
    name: threatlens-network
